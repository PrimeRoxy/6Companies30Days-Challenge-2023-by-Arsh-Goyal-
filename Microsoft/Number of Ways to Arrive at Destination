// 11. Number of ways to arrive at a Destination.


// solution :

#define ll long long
const int mod = 1e9+7;

class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<int,int>> adj[n];

        for(auto it : roads){
            adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0], it[2]});
        }
        priority_queue<pair< ll, int>,vector<pair<ll,int>>, greater<pair<ll,int>>> pq;

        vector<ll> dist(n, LONG_MAX), ways(n, 0);
        dist[0] = 0;
        ways[0] = 1;
        pq.push({0, 0});
        
        while(!pq.empty()){
            ll dis = pq.top().first;
            int nodes = pq.top().second;
            pq.pop();

            for(auto it : adj[nodes]){
                int adjnodes = it.first;
                ll ewd = it.second;

                if(dis + ewd < dist[adjnodes]){
                    dist[adjnodes] = dis +ewd;
                    pq.push({dis + ewd, adjnodes});
                    ways[adjnodes] = ways[nodes];

                }
                else if (dis + ewd == dist[adjnodes]){
                    ways[adjnodes] = (ways[adjnodes] + ways[nodes]) % mod;
                }
            }
        }
        return ways[n-1] % mod;
    }
};
